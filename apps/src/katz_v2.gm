Procedure katz(G:Graph,  Beta: Float, Max_l: Int):Int
{
        Foreach(n:G.Nodes){
                [
                       katz_score_node(G,Beta,Max_l,n);
                ];
        }
        Return 0;
}
Procedure katz_score_node(G:Graph, beta: Float, max_l: Int, x: Node)
{

	Node_Set(G) neighbor_set_1, temp_set, all_reacheable_neighbor;
	Node_Set(G) neighbor_set_2;
	Node_Set(G) direct_neighbor;
	Map<Node(G), Int> map_path_len_1;
	Map<Node(G), Int> map_path_len_2;
	Map<Node(G), Int> map_temp;
	Map<Node(G), Float> map_katz;
	Int l = 2;
	Int len_map_1;
	Int len_map_2;
	Int i;
	Node key;
	Float ktz_scr;
	//First step, initialisation whith direct neighbors
	Foreach(y:x.Nbrs)
	{
		map_path_len_1[y] = 1;
		neighbor_set_1.Add(y);
		direct_neighbor.Add(y);
	}
	//Second step, with indirect neighbors, update path lengths and katz_score
	While(l<=max_l)
	{	Foreach(y:neighbor_set_1.Items)
		{	Foreach(z:y.Nbrs)
			{	If(neighbor_set_2.Has(z))
					map_path_len_2[z] = map_path_len_2[z] + map_path_len_1[y];
				Else
				{
					map_path_len_2[z] = map_path_len_1[y];
					neighbor_set_2.Add(z);
				}	
			}
		}
		Foreach(t:neighbor_set_2.Items)(!direct_neighbor.Has(t) && t!=x)
		{
			map_katz[t] = map_katz[t] + Pow(beta,l)*map_path_len_2[t];
			all_reacheable_neighbor.Add(t);
		}
		neighbor_set_1 = neighbor_set_2;
		neighbor_set_2 = temp_set;
		l++;
		i = 0; len_map_1 = map_path_len_1.Size(); len_map_2 = map_path_len_2.Size();	
		//map_path_len_1 = map_path_len_2; map_path_len_2 = NIL;
		While(i < len_map_1)
		{
			map_path_len_1.Remove(map_path_len_1.GetMinKey());
			i++;
		}
		i = 0;
		While(i < len_map_2)
		{
			key = map_path_len_2.GetMinKey();
			map_path_len_1[key] = map_path_len_2[key];
			map_path_len_2.Remove(map_path_len_2.GetMinKey());
			i++;	
		}
	}
	//Third step, printing result
//	Foreach(y:all_reacheable_neighbor.Items)
//	{
	//	ktz_scr = map_katz[y];	
	//	[printf("{(%d %d), %f}\n", $x, $y,$ktz_scr)];	
//	}
}

