Binary file ./.git/objects/ea/976e844ca5591441aab4aca73518a7e2b46dee matches
Binary file ./.git/objects/da/cbe09d18b8fdc6de903461c68c035dc9444f5c matches
Binary file ./.git/objects/2d/d2e95a429d0d30c808b1fb2bc1845c447b856a matches
Binary file ./.git/objects/e0/e1dc9303fee0e348d3674ab50bcb5fb4f2b085 matches
Binary file ./.git/objects/67/303ed44966eeddeb3c07a6ec641bd3c1dcc9e9 matches
Binary file ./.git/objects/3a/b147037bfac2a7d9f1c8fec0660a9434dc0eba matches
Binary file ./bin/gm_comp matches
Binary file ./obj/gm_cpp_gen_foreach.o matches
./src/backend_cpp/gm_cpp_gen_foreach.cc:        	sprintf(str_for_task, "for (int tsk = 0; tsk < %s.num_task(); tsk++)\n",graph_name);
./src/backend_cpp/gm_cpp_gen_foreach.cc:        	sprintf(str_buf, "%sfor (%s %s = %s.task_tab[tsk].start; %s < %s.task_tab[tsk].end; %s ++) ",str_for_task, get_type_string(iter->getTypeSummary()), it_name, graph_name, it_name, graph_name, it_name);
Binary file ./apps/data/com-lj_prepared_7-2_gm.bin matches
Binary file ./apps/output_cpp/bin/kosaraju matches
Binary file ./apps/output_cpp/bin/communities matches
Binary file ./apps/output_cpp/bin/bc_random matches
Binary file ./apps/output_cpp/bin/pagerank matches
Binary file ./apps/output_cpp/bin/potential_friends matches
Binary file ./apps/output_cpp/bin/random_degree_node_sampling matches
Binary file ./apps/output_cpp/bin/triangle_counting matches
Binary file ./apps/output_cpp/bin/sssp_path matches
Binary file ./apps/output_cpp/bin/avg_teen_cnt matches
Binary file ./apps/output_cpp/bin/bc matches
Binary file ./apps/output_cpp/bin/bidir_dijkstra matches
Binary file ./apps/output_cpp/bin/sssp_dijkstra matches
Binary file ./apps/output_cpp/bin/bc_adj matches
Binary file ./apps/output_cpp/bin/hop_dist matches
Binary file ./apps/output_cpp/bin/random_node_sampling matches
Binary file ./apps/output_cpp/bin/sssp matches
Binary file ./apps/output_cpp/bin/sssp_path_adj matches
Binary file ./apps/output_cpp/bin/v_cover matches
Binary file ./apps/output_cpp/bin/katz_v2 matches
Binary file ./apps/output_cpp/bin/conduct matches
./apps/output_cpp/generated/bc_random.cc:    for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/bc_random.cc:    for (node_t t0 = G.task_tab[tsk].start; t0 < G.task_tab[tsk].end; t0 ++) 
./apps/output_cpp/generated/bc_random.cc:        for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/bc_random.cc:        for (node_t t1 = G.task_tab[tsk].start; t1 < G.task_tab[tsk].end; t1 ++) 
./apps/output_cpp/generated/conduct.cc:        for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/conduct.cc:        for (node_t u = G.task_tab[tsk].start; u < G.task_tab[tsk].end; u ++) 
./apps/output_cpp/generated/conduct.cc:        for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/conduct.cc:        for (node_t u0 = G.task_tab[tsk].start; u0 < G.task_tab[tsk].end; u0 ++) 
./apps/output_cpp/generated/conduct.cc:        for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/conduct.cc:        for (node_t u1 = G.task_tab[tsk].start; u1 < G.task_tab[tsk].end; u1 ++) 
./apps/output_cpp/generated/sssp_path.cc:    for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/sssp_path.cc:    for (node_t t0 = G.task_tab[tsk].start; t0 < G.task_tab[tsk].end; t0 ++) 
./apps/output_cpp/generated/sssp_path.cc:        for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/sssp_path.cc:        for (node_t n = G.task_tab[tsk].start; n < G.task_tab[tsk].end; n ++) 
./apps/output_cpp/generated/sssp_path.cc:            for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/sssp_path.cc:            for (node_t t5 = G.task_tab[tsk].start; t5 < G.task_tab[tsk].end; t5 ++) 
./apps/output_cpp/generated/sssp_dijkstra.cc:    for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/sssp_dijkstra.cc:    for (node_t t0 = G.task_tab[tsk].start; t0 < G.task_tab[tsk].end; t0 ++) 
./apps/output_cpp/generated/pagerank.cc:    for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/pagerank.cc:    for (node_t t0 = G.task_tab[tsk].start; t0 < G.task_tab[tsk].end; t0 ++) 
./apps/output_cpp/generated/pagerank.cc:            for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/pagerank.cc:            for (node_t t = G.task_tab[tsk].start; t < G.task_tab[tsk].end; t ++) 
./apps/output_cpp/generated/pagerank.cc:        for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/pagerank.cc:        for (node_t i3 = G.task_tab[tsk].start; i3 < G.task_tab[tsk].end; i3 ++) 
./apps/output_cpp/generated/potential_friends.cc:    for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/potential_friends.cc:    for (node_t v = G.task_tab[tsk].start; v < G.task_tab[tsk].end; v ++) 
./apps/output_cpp/generated/random_degree_node_sampling.cc:        for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/random_degree_node_sampling.cc:        for (node_t n = G.task_tab[tsk].start; n < G.task_tab[tsk].end; n ++) 
./apps/output_cpp/generated/random_degree_node_sampling.cc:    for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/random_degree_node_sampling.cc:    for (node_t t0 = G.task_tab[tsk].start; t0 < G.task_tab[tsk].end; t0 ++) 
./apps/output_cpp/generated/triangle_counting.cc:        for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/triangle_counting.cc:        for (node_t v = G.task_tab[tsk].start; v < G.task_tab[tsk].end; v ++) 
./apps/output_cpp/generated/preferential_attachment.cc:    for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/preferential_attachment.cc:    for (node_t n1 = G.task_tab[tsk].start; n1 < G.task_tab[tsk].end; n1 ++) 
./apps/output_cpp/generated/preferential_attachment.cc:        for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/preferential_attachment.cc:        for (node_t n2 = G.task_tab[tsk].start; n2 < G.task_tab[tsk].end; n2 ++) 
./apps/output_cpp/generated/avg_teen_cnt.cc:        for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/avg_teen_cnt.cc:        for (node_t n = G.task_tab[tsk].start; n < G.task_tab[tsk].end; n ++) 
./apps/output_cpp/generated/sssp_path_adj.cc:    for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/sssp_path_adj.cc:    for (node_t t0 = G.task_tab[tsk].start; t0 < G.task_tab[tsk].end; t0 ++) 
./apps/output_cpp/generated/sssp_path_adj.cc:        for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/sssp_path_adj.cc:        for (node_t n = G.task_tab[tsk].start; n < G.task_tab[tsk].end; n ++) 
./apps/output_cpp/generated/sssp_path_adj.cc:            for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/sssp_path_adj.cc:            for (node_t t6 = G.task_tab[tsk].start; t6 < G.task_tab[tsk].end; t6 ++) 
./apps/output_cpp/generated/bidir_dijkstra.cc:    for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/bidir_dijkstra.cc:    for (node_t t0 = G.task_tab[tsk].start; t0 < G.task_tab[tsk].end; t0 ++) 
./apps/output_cpp/generated/bidir_dijkstra.cc:    for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/bidir_dijkstra.cc:    for (node_t t5 = G.task_tab[tsk].start; t5 < G.task_tab[tsk].end; t5 ++) 
./apps/output_cpp/generated/v_cover.cc:    for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/v_cover.cc:    for (node_t t0 = G.task_tab[tsk].start; t0 < G.task_tab[tsk].end; t0 ++) 
./apps/output_cpp/generated/v_cover.cc:            for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/v_cover.cc:            for (node_t s = G.task_tab[tsk].start; s < G.task_tab[tsk].end; s ++) 
./apps/output_cpp/generated/v_cover.cc:        for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/v_cover.cc:        for (node_t t3 = G.task_tab[tsk].start; t3 < G.task_tab[tsk].end; t3 ++) 
./apps/output_cpp/generated/sssp.cc:    for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/sssp.cc:    for (node_t t0 = G.task_tab[tsk].start; t0 < G.task_tab[tsk].end; t0 ++) 
./apps/output_cpp/generated/sssp.cc:        for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/sssp.cc:        for (node_t n = G.task_tab[tsk].start; n < G.task_tab[tsk].end; n ++) 
./apps/output_cpp/generated/sssp.cc:            for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/sssp.cc:            for (node_t t4 = G.task_tab[tsk].start; t4 < G.task_tab[tsk].end; t4 ++) 
./apps/output_cpp/generated/communities.cc:    for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/communities.cc:    for (node_t x = G.task_tab[tsk].start; x < G.task_tab[tsk].end; x ++) 
./apps/output_cpp/generated/communities.cc:        for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/communities.cc:        for (node_t x0 = G.task_tab[tsk].start; x0 < G.task_tab[tsk].end; x0 ++) 
./apps/output_cpp/generated/kosaraju.cc:    for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/kosaraju.cc:    for (node_t t0 = G.task_tab[tsk].start; t0 < G.task_tab[tsk].end; t0 ++) 
./apps/output_cpp/generated/kosaraju.cc:    for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/kosaraju.cc:    for (node_t t = G.task_tab[tsk].start; t < G.task_tab[tsk].end; t ++) 
./apps/output_cpp/generated/bc_adj.cc:    for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/bc_adj.cc:    for (node_t t0 = G.task_tab[tsk].start; t0 < G.task_tab[tsk].end; t0 ++) 
./apps/output_cpp/generated/bc_adj.cc:    for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/bc_adj.cc:    for (node_t s = G.task_tab[tsk].start; s < G.task_tab[tsk].end; s ++) 
./apps/output_cpp/generated/bc_adj.cc:        for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/bc_adj.cc:        for (node_t t1 = G.task_tab[tsk].start; t1 < G.task_tab[tsk].end; t1 ++) 
./apps/output_cpp/generated/katz_v2.cc:    for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/katz_v2.cc:    for (node_t n = G.task_tab[tsk].start; n < G.task_tab[tsk].end; n ++) 
./apps/output_cpp/generated/hop_dist.cc:    for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/hop_dist.cc:    for (node_t t0 = G.task_tab[tsk].start; t0 < G.task_tab[tsk].end; t0 ++) 
./apps/output_cpp/generated/hop_dist.cc:        for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/hop_dist.cc:        for (node_t n = G.task_tab[tsk].start; n < G.task_tab[tsk].end; n ++) 
./apps/output_cpp/generated/hop_dist.cc:            for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/hop_dist.cc:            for (node_t t4 = G.task_tab[tsk].start; t4 < G.task_tab[tsk].end; t4 ++) 
./apps/output_cpp/generated/bc.cc:    for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/bc.cc:    for (node_t t0 = G.task_tab[tsk].start; t0 < G.task_tab[tsk].end; t0 ++) 
./apps/output_cpp/generated/bc.cc:        for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/bc.cc:        for (node_t t1 = G.task_tab[tsk].start; t1 < G.task_tab[tsk].end; t1 ++) 
./apps/output_cpp/generated/random_node_sampling.cc:    for (int tsk = 0; tsk < G.num_task(); tsk++)
./apps/output_cpp/generated/random_node_sampling.cc:    for (node_t v = G.task_tab[tsk].start; v < G.task_tab[tsk].end; v ++) 
